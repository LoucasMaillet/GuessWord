var socket = io();

var input = document.getElementById('input');
var output = document.getElementById('output');

var navbar = document.getElementById("navbar");
var cLogs = document.querySelector("#logs .content");
var stdin = document.getElementById("stdin");
var stdinB = document.getElementById("stdinB");
var cConsole = document.querySelector("#console .content");
var view = document.querySelector("view");
var cPlugins = document.getElementById("plugins")

Object.prototype.setAround = ({ x=50, y=50, angle }) => {
    this.style.left = `calc( ${x}% - (${this.style.width} / 2))`
    console.log(x, y, angle)
}

function ansiToHTML(text) {
    /**
     * Convert text to html 
     * @param {string} text text to convert
     * @return {string} text converted into html code 
    */
    ansi = {
        "\\[37m": "<c class='white'>",
        "\\[36m": "<c class='cyan'>",
        "\\[35m": "<c class='magenta'>",
        "\\[33m": "<c class='yellow'>",
        "\\[32m": "<c class='green'>",
        "\\[31m": "<c class='red'>",
        "\\[39m": "</c>"
    }
    for (color in ansi) {
        reg = new RegExp(color, "g")
        text = text.replace(reg, ansi[color]);
    }
    return text
}

function showMenu() {
    /**
     * Show full menu
    */
    if (navbar.style.width == "3em") {
        navbar.style.width = "9em";
        view.style.width = "calc(100vw - 9em)";
        navbar.classList.add("open");
        navbar.classList.remove("close");
    } else {
        navbar.style.width = "3em";
        view.style.width = "calc(100vw - 3em)";
        navbar.classList.add("close");
        navbar.classList.remove("open");
    }
}

function switchTo(id) {
    /**
     * Switch to page
     * @param {string} id page's id
    */
    localStorage.setItem("viewId", id);
    view.scrollTop = document.getElementById(id).offsetTop;
}

function showPlug(el) {
    /**
     * Show informations about plugin
     * @param {HTMLElement} el plugin clicked
    */
    console.log(el.title, el.dataset.description)
    document.addEventListener("keydown", unShowMod);
}

function unShowMod(event) {
    /**
     * Hide informations about plugin
     * @param {event} event
    */
    if (event.key == "Escape" || (event.ctrlKey && event.key == 'z')) {
        console.log('removed')
        document.removeEventListener("keydown", unShowMod);
    }
}

//socket event

socket.on('send:logAll', (logs) => {
    logs.forEach(([time, log]) => {
        cLogs.innerHTML += `<p title="${time}">${ansiToHTML(log)}</p>`;
    });
    cLogs.scrollTop = cLogs.scrollHeight;
})

socket.on('send:log', ([time, log]) => {
    cLogs.innerHTML += `<p title="${time}">${ansiToHTML(log)}</p>`;
    cLogs.scrollTop = cLogs.scrollHeight;
})

function getAround({ angle, rayon, index, offset = 0, origineX = 50, origineY = 50 }) {
    /**
     * Get position around the center
     * @param {int} angle
     * @param {int} rayon
     * @param {int} index
     * @param {int} offset
     * @return {int} {int}
     */
    return {
        x: origineX + Math.round(rayon * Math.cos((Math.PI / 180) * (angle * index + offset))),
        y: origineY + Math.round(rayon * Math.sin((Math.PI / 180) * (angle * index + offset)))
    }
}

socket.on('send:conf', (conf) => {

    plugins = conf.plugins

    for (p = 0; p < 3; p++) {
        plugins = [
            ...plugins.slice(0, p * 2),
            {
                ico: ` <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" style="fill: var(--c-back-on)">
                        <path d="M19.864 8.465a3.505 3.505 0 0 0-3.03-4.449A3.005 3.005 0 0 0 14 2a2.98 2.98 0 0 0-2 .78A2.98 2.98 0 0 0 10 2c-1.301 0-2.41.831-2.825 2.015a3.505 3.505 0 0 0-3.039 4.45A4.028 4.028 0 0 0 2 12c0 1.075.428 2.086 1.172 2.832A4.067 4.067 0 0 0 3 16c0 1.957 1.412 3.59 3.306 3.934A3.515 3.515 0 0 0 9.5 22c.979 0 1.864-.407 2.5-1.059A3.484 3.484 0 0 0 14.5 22a3.51 3.51 0 0 0 3.19-2.06 4.006 4.006 0 0 0 3.138-5.108A4.003 4.003 0 0 0 22 12a4.028 4.028 0 0 0-2.136-3.535zM9.5 20c-.711 0-1.33-.504-1.47-1.198L7.818 18H7c-1.103 0-2-.897-2-2 0-.352.085-.682.253-.981l.456-.816-.784-.51A2.019 2.019 0 0 1 4 12c0-.977.723-1.824 1.682-1.972l1.693-.26-1.059-1.346a1.502 1.502 0 0 1 1.498-2.39L9 6.207V5a1 1 0 0 1 2 0v13.5c0 .827-.673 1.5-1.5 1.5zm9.575-6.308-.784.51.456.816c.168.3.253.63.253.982 0 1.103-.897 2-2.05 2h-.818l-.162.802A1.502 1.502 0 0 1 14.5 20c-.827 0-1.5-.673-1.5-1.5V5c0-.552.448-1 1-1s1 .448 1 1.05v1.207l1.186-.225a1.502 1.502 0 0 1 1.498 2.39l-1.059 1.347 1.693.26A2.002 2.002 0 0 1 20 12c0 .683-.346 1.315-.925 1.692z"></path></svg>
                    </div>`,
                alias: ["test"],
                description: "test",
                type: "essential"
            },
            ...plugins.slice(p * 2),
        ]
    }

    cPlugins.innerHTML = `
        <div>
            <svg viewBox="0 0 24 24">
                <path d="M20 3H4a2 2 0 0 0-2 2v4a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V5a2 2 0 0 0-2-2zM4 9V5h16v4zm16 4H4a2 2 0 0 0-2 2v4a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-4a2 2 0 0 0-2-2zM4 19v-4h16v4z"></path><path d="M17 6h2v2h-2zm-3 0h2v2h-2zm3 10h2v2h-2zm-3 0h2v2h-2z"></path>
            </svg>
        </div>`;
    angle = Math.round(360 / plugins.length);
    offset = angle / 2;
    if (plugins.length % 2 == 1) offset = angle / 4
    for (i = 0; i < plugins.length; i++) {
        r = Math.floor(Math.random() * 10) + 20;
        if (plugins[i].type) {
            var { x, y } = getAround({ angle: angle, rayon: r, index: i, offset: offset });
        } else {
            var { x, y } = getAround({ angle: angle, rayon: r, index: i, offset: offset });
        }
        cPlugins.innerHTML += `    
            <div title="${plugins[i].alias[0]}" style="left:calc(${x}% - 4vh); top:calc(${y}% - 4vh)" class="${plugins[i].type || ""}" data-description="${plugins[i].description}" onclick="showPlug(this)">
                ${plugins[i].ico}
            </div>
            <svg>
                <line x1="${x}%" y1="${y}%" x2="50%" y2="50%"/>
            </svg>`;
        var [X, Y] = [x, y];
        for (i2 = 0; i2 < plugins.length / 2; i2++) {
            var { x, y } = getAround({ angle: 60, rayon: 10, index: i2, offset: angle * i - 30, origineX: X, origineY: Y });
            cPlugins.innerHTML += `    
                    <div title="${plugins[i2].alias[0]}" style="left:calc(${x}% - 1.5vh); top:calc(${y}% - 1.5vh);height:3vh; width:3vh;" class="${plugins[i2].type || ""}" data-description="${plugins[i2].description}" onclick="showPlug(this)">
                        ${plugins[i2].ico}
                    </div>`;

        }
    }

})

//client event

input.onkeydown = (event) => {
    output.classList.add('wait');
    output.innerText = " Awaiting results"
    if (event.key == 'Enter') {
        socket.emit('send:text', input.innerText);
        input.innerText = ' ';
    }
}

window.onresize = () => {
    document.documentElement.style.scrollBehavior = "auto";
    document.documentElement.style.transition = "none";
    switchTo(localStorage.getItem("viewId") || "home");
    document.documentElement.style.scrollBehavior = "smooth";
    document.documentElement.style.transition = "all .3s ease-in-out";

}

stdin.onkeydown = (event) => {
    if (event.keyCode == 13 && !event.shiftKey) {
        socket.emit('stdin', stdin.innerText);
        stdinB.insertAdjacentHTML("beforebegin", `<p title="Client">${ansiToHTML(stdin.innerText)}</p>`);
        stdin.innerText = "";
    }
}

//setup

navbar.style.width = "3em";
navbar.classList.add("close");
switchTo(localStorage.getItem("viewId") || "home");
